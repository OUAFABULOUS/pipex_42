!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Werror -Wextra -Wall -g -fsanitize=address$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = -I$(INC_DIR)$/;"	m
INC_DIR	Makefile	/^INC_DIR = includes\/$/;"	m
OBJS	Makefile	/^OBJS = $(addprefix $(OBJ_DIR), $(SRCS:%.c=%.o))$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR = bin\/$/;"	m
PIPEX	Makefile	/^PIPEX = pipex$/;"	m
PIPEX_H	includes/pipex.h	/^# define PIPEX_H$/;"	d
SRCS	Makefile	/^SRCS = pipex.c \\$/;"	m
SRC_DIR	Makefile	/^SRC_DIR = src\/$/;"	m
STDIN	includes/pipex.h	/^# define STDIN /;"	d
STDOUT	includes/pipex.h	/^# define STDOUT /;"	d
cleaning	Makefile	/^define cleaning $/;"	m
cmd_num	includes/pipex.h	/^	int		cmd_num;$/;"	m	struct:s_pipex
cmdn	includes/pipex.h	/^	char	**cmdn;$/;"	m	struct:s_pipex
cmdn_args	includes/pipex.h	/^	char	**cmdn_args;$/;"	m	struct:s_pipex
cmdn_path	includes/pipex.h	/^	char	**cmdn_path;$/;"	m	struct:s_pipex
cmdnargs	includes/pipex.h	/^	char	***cmdnargs;$/;"	m	struct:s_pipex
compiling	Makefile	/^define compiling$/;"	m
double_ptr_print	src/utils_2.c	/^void	double_ptr_print(char **str)$/;"	f
fcleaning	Makefile	/^define fcleaning $/;"	m
fd	includes/pipex.h	/^	int		**fd;$/;"	m	struct:s_pipex
fd_in	includes/pipex.h	/^	int		fd_in;$/;"	m	struct:s_pipex
fd_out	includes/pipex.h	/^	int		fd_out;$/;"	m	struct:s_pipex
finishing	Makefile	/^define finishing$/;"	m
free_fds	src/utils_2.c	/^void	free_fds(t_pipex *p, int i)$/;"	f
free_init	src/utils_3.c	/^void	free_init(t_pipex *p)$/;"	f
free_split	src/utils_2.c	/^void	free_split(char **str)$/;"	f
ft_char_in_charset	src/split.c	/^static int	ft_char_in_charset(char *str, char c)$/;"	f	file:
ft_child	src/utils_3.c	/^void	ft_child(t_pipex *p, char **env)$/;"	f
ft_concat	src/utils_1.c	/^char	*ft_concat(char *str1, char c, char *str2)$/;"	f
ft_fork	src/utils_3.c	/^void	ft_fork(t_pipex *p, char **env)$/;"	f
ft_parent	src/utils_3.c	/^void	ft_parent(t_pipex *p, char **env)$/;"	f
ft_split	src/split.c	/^char	**ft_split(char *str, char *charset)$/;"	f
ft_strdup	src/utils_1.c	/^char	*ft_strdup(char *str)$/;"	f
ft_strlen	src/utils_1.c	/^int	ft_strlen(char *str)$/;"	f
ft_strncmp	src/utils_1.c	/^int	ft_strncmp(char *str1, char *str2, int n)$/;"	f
ft_strncpy	src/split.c	/^static char	*ft_strncpy(char *dest, char *src, unsigned int n)$/;"	f	file:
ft_word_count	src/split.c	/^static int	ft_word_count(char *str, char *charset)$/;"	f	file:
get_cmd_path	src/utils_2.c	/^void	get_cmd_path(t_pipex *p, char *cmd, char **cmd_path)$/;"	f
get_cmdnargs	src/utils_2.c	/^void	get_cmdnargs(t_pipex *p, char **av)$/;"	f
get_cmds	src/utils_2.c	/^void	get_cmds(t_pipex *p)$/;"	f
get_cmds_path	src/utils_2.c	/^void	get_cmds_path(t_pipex *p)$/;"	f
get_paths	src/utils_1.c	/^void	get_paths(t_pipex *p, char **env)$/;"	f
handle_error	src/utils_2.c	/^void	handle_error(char *str)$/;"	f
init	src/utils_2.c	/^void	init(t_pipex *p, char **av, int ac, char **env)$/;"	f
main	src/pipex.c	/^int	main(int argc, char **argv, char **env)$/;"	f
paths	includes/pipex.h	/^	char	**paths;$/;"	m	struct:s_pipex
s_pipex	includes/pipex.h	/^typedef struct s_pipex {$/;"	s
t_pipex	includes/pipex.h	/^}				t_pipex;$/;"	t	typeref:struct:s_pipex
triple_ptr_print	src/utils_2.c	/^void	triple_ptr_print(char ***str)$/;"	f
